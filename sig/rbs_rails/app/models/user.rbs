class User < ::ApplicationRecord
  extend ::_ActiveRecord_Relation_ClassMethods[::User, ::User::ActiveRecord_Relation, ::Integer]

  module GeneratedAttributeMethods
    def id: () -> ::Integer

    def id=: (::Integer) -> ::Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ ::Integer?, ::Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> ::Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> ::Array[::Integer?]?

    def id_previously_was: () -> ::Integer?

    def id_before_last_save: () -> ::Integer?

    def id_change_to_be_saved: () -> ::Array[::Integer?]?

    def id_in_database: () -> ::Integer?

    def saved_change_to_id: () -> ::Array[::Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def email: () -> ::String

    def email=: (::String) -> ::String

    def email?: () -> bool

    def email_changed?: () -> bool

    def email_change: () -> [ ::String?, ::String? ]

    def email_will_change!: () -> void

    def email_was: () -> ::String?

    def email_previously_changed?: () -> bool

    def email_previous_change: () -> ::Array[::String?]?

    def email_previously_was: () -> ::String?

    def email_before_last_save: () -> ::String?

    def email_change_to_be_saved: () -> ::Array[::String?]?

    def email_in_database: () -> ::String?

    def saved_change_to_email: () -> ::Array[::String?]?

    def saved_change_to_email?: () -> bool

    def will_save_change_to_email?: () -> bool

    def restore_email!: () -> void

    def clear_email_change: () -> void

    def encrypted_password: () -> ::String

    def encrypted_password=: (::String) -> ::String

    def encrypted_password?: () -> bool

    def encrypted_password_changed?: () -> bool

    def encrypted_password_change: () -> [ ::String?, ::String? ]

    def encrypted_password_will_change!: () -> void

    def encrypted_password_was: () -> ::String?

    def encrypted_password_previously_changed?: () -> bool

    def encrypted_password_previous_change: () -> ::Array[::String?]?

    def encrypted_password_previously_was: () -> ::String?

    def encrypted_password_before_last_save: () -> ::String?

    def encrypted_password_change_to_be_saved: () -> ::Array[::String?]?

    def encrypted_password_in_database: () -> ::String?

    def saved_change_to_encrypted_password: () -> ::Array[::String?]?

    def saved_change_to_encrypted_password?: () -> bool

    def will_save_change_to_encrypted_password?: () -> bool

    def restore_encrypted_password!: () -> void

    def clear_encrypted_password_change: () -> void

    def reset_password_token: () -> ::String?

    def reset_password_token=: (::String?) -> ::String?

    def reset_password_token?: () -> bool

    def reset_password_token_changed?: () -> bool

    def reset_password_token_change: () -> [ ::String?, ::String? ]

    def reset_password_token_will_change!: () -> void

    def reset_password_token_was: () -> ::String?

    def reset_password_token_previously_changed?: () -> bool

    def reset_password_token_previous_change: () -> ::Array[::String?]?

    def reset_password_token_previously_was: () -> ::String?

    def reset_password_token_before_last_save: () -> ::String?

    def reset_password_token_change_to_be_saved: () -> ::Array[::String?]?

    def reset_password_token_in_database: () -> ::String?

    def saved_change_to_reset_password_token: () -> ::Array[::String?]?

    def saved_change_to_reset_password_token?: () -> bool

    def will_save_change_to_reset_password_token?: () -> bool

    def restore_reset_password_token!: () -> void

    def clear_reset_password_token_change: () -> void

    def reset_password_sent_at: () -> ::ActiveSupport::TimeWithZone?

    def reset_password_sent_at=: (::ActiveSupport::TimeWithZone?) -> ::ActiveSupport::TimeWithZone?

    def reset_password_sent_at?: () -> bool

    def reset_password_sent_at_changed?: () -> bool

    def reset_password_sent_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def reset_password_sent_at_will_change!: () -> void

    def reset_password_sent_at_was: () -> ::ActiveSupport::TimeWithZone?

    def reset_password_sent_at_previously_changed?: () -> bool

    def reset_password_sent_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def reset_password_sent_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def reset_password_sent_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def reset_password_sent_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def reset_password_sent_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_reset_password_sent_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_reset_password_sent_at?: () -> bool

    def will_save_change_to_reset_password_sent_at?: () -> bool

    def restore_reset_password_sent_at!: () -> void

    def clear_reset_password_sent_at_change: () -> void

    def remember_created_at: () -> ::ActiveSupport::TimeWithZone?

    def remember_created_at=: (::ActiveSupport::TimeWithZone?) -> ::ActiveSupport::TimeWithZone?

    def remember_created_at?: () -> bool

    def remember_created_at_changed?: () -> bool

    def remember_created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def remember_created_at_will_change!: () -> void

    def remember_created_at_was: () -> ::ActiveSupport::TimeWithZone?

    def remember_created_at_previously_changed?: () -> bool

    def remember_created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def remember_created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def remember_created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def remember_created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def remember_created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_remember_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_remember_created_at?: () -> bool

    def will_save_change_to_remember_created_at?: () -> bool

    def restore_remember_created_at!: () -> void

    def clear_remember_created_at_change: () -> void

    def created_at: () -> ::ActiveSupport::TimeWithZone

    def created_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ::ActiveSupport::TimeWithZone

    def updated_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def first_name: () -> ::String

    def first_name=: (::String) -> ::String

    def first_name?: () -> bool

    def first_name_changed?: () -> bool

    def first_name_change: () -> [ ::String?, ::String? ]

    def first_name_will_change!: () -> void

    def first_name_was: () -> ::String?

    def first_name_previously_changed?: () -> bool

    def first_name_previous_change: () -> ::Array[::String?]?

    def first_name_previously_was: () -> ::String?

    def first_name_before_last_save: () -> ::String?

    def first_name_change_to_be_saved: () -> ::Array[::String?]?

    def first_name_in_database: () -> ::String?

    def saved_change_to_first_name: () -> ::Array[::String?]?

    def saved_change_to_first_name?: () -> bool

    def will_save_change_to_first_name?: () -> bool

    def restore_first_name!: () -> void

    def clear_first_name_change: () -> void

    def last_name: () -> ::String

    def last_name=: (::String) -> ::String

    def last_name?: () -> bool

    def last_name_changed?: () -> bool

    def last_name_change: () -> [ ::String?, ::String? ]

    def last_name_will_change!: () -> void

    def last_name_was: () -> ::String?

    def last_name_previously_changed?: () -> bool

    def last_name_previous_change: () -> ::Array[::String?]?

    def last_name_previously_was: () -> ::String?

    def last_name_before_last_save: () -> ::String?

    def last_name_change_to_be_saved: () -> ::Array[::String?]?

    def last_name_in_database: () -> ::String?

    def saved_change_to_last_name: () -> ::Array[::String?]?

    def saved_change_to_last_name?: () -> bool

    def will_save_change_to_last_name?: () -> bool

    def restore_last_name!: () -> void

    def clear_last_name_change: () -> void
  end
  include GeneratedAttributeMethods
  def posters: () -> ::Poster::ActiveRecord_Associations_CollectionProxy
  def posters=: (::Poster::ActiveRecord_Associations_CollectionProxy | ::Array[::Poster]) -> (::Poster::ActiveRecord_Associations_CollectionProxy | ::Array[::Poster])
  def poster_ids: () -> ::Array[::Integer]
  def poster_ids=: (::Array[::Integer]) -> ::Array[::Integer]
  def avatar_attachment: () -> ::ActiveStorage::Attachment?
  def avatar_attachment=: (::ActiveStorage::Attachment?) -> ::ActiveStorage::Attachment?
  def build_avatar_attachment: (?untyped) -> ::ActiveStorage::Attachment
  def create_avatar_attachment: (untyped) -> ::ActiveStorage::Attachment
  def create_avatar_attachment!: (untyped) -> ::ActiveStorage::Attachment
  def reload_avatar_attachment: () -> ::ActiveStorage::Attachment?
  def avatar_blob: () -> ::ActiveStorage::Blob?
  def avatar_blob=: (::ActiveStorage::Blob?) -> ::ActiveStorage::Blob?
  def build_avatar_blob: (?untyped) -> ::ActiveStorage::Blob
  def create_avatar_blob: (untyped) -> ::ActiveStorage::Blob
  def create_avatar_blob!: (untyped) -> ::ActiveStorage::Blob
  def reload_avatar_blob: () -> ::ActiveStorage::Blob?

  module GeneratedAssociationMethods
    def avatar: () -> ::ActiveStorage::Attached::One

    def avatar=: (::ActionDispatch::Http::UploadedFile) -> ::ActionDispatch::Http::UploadedFile
               | (::Rack::Test::UploadedFile) -> ::Rack::Test::UploadedFile
               | (::ActiveStorage::Blob) -> ::ActiveStorage::Blob
               | (::String) -> ::String
               | ({ io: ::IO, filename: ::String, content_type: ::String? }) -> { io: ::IO, filename: ::String, content_type: ::String? }
               | (nil) -> nil
  end
  include GeneratedAssociationMethods

  def self.with_attached_avatar: () -> ::User::ActiveRecord_Relation

  module GeneratedRelationMethods
    def with_attached_avatar: () -> ::User::ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::User::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::User, ::Integer]
    include ::Enumerable[::User]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::User::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::User, ::Integer]
  end
end
